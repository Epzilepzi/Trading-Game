{"version":3,"sources":["../src/MacUpdater.ts"],"names":[],"mappings":"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","sourcesContent":["import { AllPublishOptions, CancellationToken, configureRequestOptionsFromUrl, DigestTransform, newError, RequestHeaders, safeStringifyJson } from \"builder-util-runtime\"\nimport { createServer, IncomingMessage, OutgoingHttpHeaders, ServerResponse } from \"http\"\nimport { AddressInfo } from \"net\"\nimport { AppUpdater, DownloadUpdateOptions } from \"./AppUpdater\"\nimport { DOWNLOAD_PROGRESS } from \"./main\"\nimport { findFile } from \"./providers/Provider\"\nimport { createReadStream, stat } from \"fs-extra-p\"\nimport AutoUpdater = Electron.AutoUpdater\n\nexport class MacUpdater extends AppUpdater {\n  private readonly nativeUpdater: AutoUpdater = require(\"electron\").autoUpdater\n\n  constructor(options?: AllPublishOptions) {\n    super(options)\n\n    this.nativeUpdater.on(\"error\", it => {\n      this._logger.warn(it)\n      this.emit(\"error\", it)\n    })\n  }\n\n  protected async doDownloadUpdate(downloadUpdateOptions: DownloadUpdateOptions): Promise<Array<string>> {\n    const files = (await this.provider).resolveFiles(downloadUpdateOptions.updateInfo)\n    const zipFileInfo = findFile(files, \"zip\", [\"pkg\", \"dmg\"])\n    if (zipFileInfo == null) {\n      throw newError(`ZIP file not provided: ${safeStringifyJson(files)}`, \"ERR_UPDATER_ZIP_FILE_NOT_FOUND\")\n    }\n\n    const server = createServer()\n    server.on(\"close\", () => {\n      this._logger.info(`Proxy server for native Squirrel.Mac is closed (was started to download ${zipFileInfo.url.href})`)\n    })\n\n    function getServerUrl() {\n      const address = server.address() as AddressInfo\n      return `http://${address.address}:${address.port}`\n    }\n\n    return await this.executeDownload({\n      fileExtension: \"zip\",\n      fileInfo: zipFileInfo,\n      downloadUpdateOptions,\n      task: (destinationFile, downloadOptions) => {\n        return this.httpExecutor.download(zipFileInfo.url.href, destinationFile, downloadOptions)\n      },\n      done: async updateFile => {\n        let updateFileSize = zipFileInfo.info.size\n        if (updateFileSize == null) {\n          updateFileSize = (await stat(updateFile)).size\n        }\n\n        return await new Promise<Array<string>>((resolve, reject) => {\n          server.on(\"request\", (request: IncomingMessage, response: ServerResponse) => {\n            const requestUrl = request.url!!\n            this._logger.info(`${requestUrl} requested`)\n            if (requestUrl === \"/\") {\n              const data = Buffer.from(`{ \"url\": \"${getServerUrl()}/app.zip\" }`)\n              response.writeHead(200, {\"Content-Type\": \"application/json\", \"Content-Length\": data.length})\n              response.end(data)\n            }\n            else if (requestUrl.startsWith(\"/app.zip\")) {\n              let errorOccurred = false\n              response.on(\"finish\", () => {\n                try {\n                  setImmediate(() => server.close())\n                }\n                finally {\n                  if (!errorOccurred) {\n                    this.nativeUpdater.removeListener(\"error\", reject)\n                    resolve([])\n                  }\n                }\n              })\n\n              this._logger.info(`app.zip requested by Squirrel.Mac, pipe ${updateFile}`)\n\n              const readStream = createReadStream(updateFile)\n              readStream.on(\"error\", error => {\n                try {\n                  response.end()\n                }\n                catch (e) {\n                  errorOccurred = true\n                  this.nativeUpdater.removeListener(\"error\", reject)\n                  reject(new Error(`Cannot pipe \"${updateFile}\": ${error}`))\n                }\n              })\n\n              response.writeHead(200, {\n                \"Content-Type\": \"application/zip\",\n                \"Content-Length\": updateFileSize,\n              })\n              readStream.pipe(response)\n            }\n            else {\n              this._logger.warn(`${requestUrl} requested, but not supported`)\n              response.writeHead(404)\n              response.end()\n            }\n          })\n          server.listen(0, \"127.0.0.1\", 8, () => {\n            this.nativeUpdater.setFeedURL(`${getServerUrl()}`, {\"Cache-Control\": \"no-cache\"})\n\n            this.nativeUpdater.once(\"error\", reject)\n            this.nativeUpdater.checkForUpdates()\n          })\n        })\n      }\n    })\n  }\n\n  private doProxyUpdateFile(nativeResponse: ServerResponse, url: string, headers: OutgoingHttpHeaders, sha512: string | null, cancellationToken: CancellationToken, errorHandler: (error: Error) => void) {\n    const downloadRequest = this.httpExecutor.doRequest(configureRequestOptionsFromUrl(url, {headers}), downloadResponse => {\n      const nativeHeaders: RequestHeaders = {\"Content-Type\": \"application/zip\"}\n      const streams: Array<any> = []\n      const downloadListenerCount = this.listenerCount(DOWNLOAD_PROGRESS)\n      this._logger.info(`${DOWNLOAD_PROGRESS} listener count: ${downloadListenerCount}`)\n      nativeResponse.writeHead(200, nativeHeaders)\n\n      // for mac only sha512 is produced (sha256 is published for windows only to preserve backward compatibility)\n      if (sha512 != null) {\n        // \"hex\" to easy migrate to new base64 encoded hash (we already produces latest-mac.yml with hex encoded hash)\n        streams.push(new DigestTransform(sha512, \"sha512\", sha512.length === 128 && !sha512.includes(\"+\") && !sha512.includes(\"Z\") && !sha512.includes(\"=\") ? \"hex\" : \"base64\"))\n      }\n\n      streams.push(nativeResponse)\n\n      let lastStream = downloadResponse\n      for (const stream of streams) {\n        stream.on(\"error\", errorHandler)\n        lastStream = lastStream.pipe(stream)\n      }\n    })\n\n    downloadRequest.on(\"redirect\", (statusCode: number, method: string, redirectUrl: string) => {\n      if (headers.authorization != null && (headers!!.authorization as string).startsWith(\"token\")) {\n        const parsedNewUrl = new URL(redirectUrl)\n        if (parsedNewUrl.hostname.endsWith(\".amazonaws.com\")) {\n          delete headers.authorization\n        }\n      }\n      this.doProxyUpdateFile(nativeResponse, redirectUrl, headers, sha512, cancellationToken, errorHandler)\n    })\n    downloadRequest.on(\"error\", errorHandler)\n    downloadRequest.end()\n  }\n\n  quitAndInstall(): void {\n    this.nativeUpdater.quitAndInstall()\n  }\n}"],"sourceRoot":""}
